{"version":3,"file":"static/js/51.f3c1e8dc.chunk.js","mappings":"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","sources":["../node_modules/chess.js/src/chess.ts","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/typeof.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2023, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nexport const WHITE = 'w'\nexport const BLACK = 'b'\n\nexport const PAWN = 'p'\nexport const KNIGHT = 'n'\nexport const BISHOP = 'b'\nexport const ROOK = 'r'\nexport const QUEEN = 'q'\nexport const KING = 'k'\n\nexport type Color = 'w' | 'b'\nexport type PieceSymbol = 'p' | 'n' | 'b' | 'r' | 'q' | 'k'\n\n// prettier-ignore\nexport type Square =\n    'a8' | 'b8' | 'c8' | 'd8' | 'e8' | 'f8' | 'g8' | 'h8' |\n    'a7' | 'b7' | 'c7' | 'd7' | 'e7' | 'f7' | 'g7' | 'h7' |\n    'a6' | 'b6' | 'c6' | 'd6' | 'e6' | 'f6' | 'g6' | 'h6' |\n    'a5' | 'b5' | 'c5' | 'd5' | 'e5' | 'f5' | 'g5' | 'h5' |\n    'a4' | 'b4' | 'c4' | 'd4' | 'e4' | 'f4' | 'g4' | 'h4' |\n    'a3' | 'b3' | 'c3' | 'd3' | 'e3' | 'f3' | 'g3' | 'h3' |\n    'a2' | 'b2' | 'c2' | 'd2' | 'e2' | 'f2' | 'g2' | 'h2' |\n    'a1' | 'b1' | 'c1' | 'd1' | 'e1' | 'f1' | 'g1' | 'h1'\n\nexport const DEFAULT_POSITION =\n  'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n\nexport type Piece = {\n  color: Color\n  type: PieceSymbol\n}\n\ntype InternalMove = {\n  color: Color\n  from: number\n  to: number\n  piece: PieceSymbol\n  captured?: PieceSymbol\n  promotion?: PieceSymbol\n  flags: number\n}\n\ninterface History {\n  move: InternalMove\n  kings: Record<Color, number>\n  turn: Color\n  castling: Record<Color, number>\n  epSquare: number\n  halfMoves: number\n  moveNumber: number\n}\n\nexport type Move = {\n  color: Color\n  from: Square\n  to: Square\n  piece: PieceSymbol\n  captured?: PieceSymbol\n  promotion?: PieceSymbol\n  flags: string\n  san: string\n  lan: string\n  before: string\n  after: string\n}\n\nconst EMPTY = -1\n\nconst FLAGS: Record<string, string> = {\n  NORMAL: 'n',\n  CAPTURE: 'c',\n  BIG_PAWN: 'b',\n  EP_CAPTURE: 'e',\n  PROMOTION: 'p',\n  KSIDE_CASTLE: 'k',\n  QSIDE_CASTLE: 'q',\n}\n\n// prettier-ignore\nexport const SQUARES: Square[] = [\n  'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8',\n  'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7',\n  'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6',\n  'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5',\n  'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4',\n  'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3',\n  'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2',\n  'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'\n]\n\nconst BITS: Record<string, number> = {\n  NORMAL: 1,\n  CAPTURE: 2,\n  BIG_PAWN: 4,\n  EP_CAPTURE: 8,\n  PROMOTION: 16,\n  KSIDE_CASTLE: 32,\n  QSIDE_CASTLE: 64,\n}\n\n/*\n * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM\n * ----------------------------------------------------------------------------\n * From https://github.com/jhlywa/chess.js/issues/230\n *\n * A lot of people are confused when they first see the internal representation\n * of chess.js. It uses the 0x88 Move Generation Algorithm which internally\n * stores the board as an 8x16 array. This is purely for efficiency but has a\n * couple of interesting benefits:\n *\n * 1. 0x88 offers a very inexpensive \"off the board\" check. Bitwise AND (&) any\n *    square with 0x88, if the result is non-zero then the square is off the\n *    board. For example, assuming a knight square A8 (0 in 0x88 notation),\n *    there are 8 possible directions in which the knight can move. These\n *    directions are relative to the 8x16 board and are stored in the\n *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two\n *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88\n *    (because of two-complement representation of -18). The non-zero result\n *    means the square is off the board and the move is illegal. Take the\n *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero\n *    means the square is on the board.\n *\n * 2. The relative distance (or difference) between two squares on a 8x16 board\n *    is unique and can be used to inexpensively determine if a piece on a\n *    square can attack any other arbitrary square. For example, let's see if a\n *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is\n *    -80. We add 119 to make the ATTACKS array index non-negative (because the\n *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a\n *    bitmask of pieces that can attack from that distance and direction.\n *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the\n *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn\n *    example, we would check to see if 24 & 0x1 is non-zero, which it is\n *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a\n *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that\n *    there are no blocking pieces between E7 and E2. That's where the RAYS\n *    array comes in. It provides an offset (in this case 16) to add to E7 (20)\n *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.\n */\n\n// prettier-ignore\n// eslint-disable-next-line\nconst Ox88: Record<Square, number> = {\n  a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n  a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n  a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n  a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n  a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n  a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n  a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n  a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n}\n\nconst PAWN_OFFSETS = {\n  b: [16, 32, 17, 15],\n  w: [-16, -32, -17, -15],\n}\n\nconst PIECE_OFFSETS = {\n  n: [-18, -33, -31, -14, 18, 33, 31, 14],\n  b: [-17, -15, 17, 15],\n  r: [-16, 1, 16, -1],\n  q: [-17, -16, -15, 1, 17, 16, 15, -1],\n  k: [-17, -16, -15, 1, 17, 16, 15, -1],\n}\n\n// prettier-ignore\nconst ATTACKS = [\n  20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\n   0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n   0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n   0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n   0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n  24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\n   0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n   0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n   0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n   0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n  20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\n];\n\n// prettier-ignore\nconst RAYS = [\n   17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\n    0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\n    0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\n    0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\n    0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\n    1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\n    0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\n    0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\n    0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\n    0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\n  -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\n];\n\nconst PIECE_MASKS = { p: 0x1, n: 0x2, b: 0x4, r: 0x8, q: 0x10, k: 0x20 }\n\nconst SYMBOLS = 'pnbrqkPNBRQK'\n\nconst PROMOTIONS: PieceSymbol[] = [KNIGHT, BISHOP, ROOK, QUEEN]\n\nconst RANK_1 = 7\nconst RANK_2 = 6\n/*\n * const RANK_3 = 5\n * const RANK_4 = 4\n * const RANK_5 = 3\n * const RANK_6 = 2\n */\nconst RANK_7 = 1\nconst RANK_8 = 0\n\nconst SIDES = {\n  [KING]: BITS.KSIDE_CASTLE,\n  [QUEEN]: BITS.QSIDE_CASTLE,\n}\n\nconst ROOKS = {\n  w: [\n    { square: Ox88.a1, flag: BITS.QSIDE_CASTLE },\n    { square: Ox88.h1, flag: BITS.KSIDE_CASTLE },\n  ],\n  b: [\n    { square: Ox88.a8, flag: BITS.QSIDE_CASTLE },\n    { square: Ox88.h8, flag: BITS.KSIDE_CASTLE },\n  ],\n}\n\nconst SECOND_RANK = { b: RANK_7, w: RANK_2 }\n\nconst TERMINATION_MARKERS = ['1-0', '0-1', '1/2-1/2', '*']\n\n// Extracts the zero-based rank of an 0x88 square.\nfunction rank(square: number): number {\n  return square >> 4\n}\n\n// Extracts the zero-based file of an 0x88 square.\nfunction file(square: number): number {\n  return square & 0xf\n}\n\nfunction isDigit(c: string): boolean {\n  return '0123456789'.indexOf(c) !== -1\n}\n\n// Converts a 0x88 square to algebraic notation.\nfunction algebraic(square: number): Square {\n  const f = file(square)\n  const r = rank(square)\n  return ('abcdefgh'.substring(f, f + 1) +\n    '87654321'.substring(r, r + 1)) as Square\n}\n\nfunction swapColor(color: Color): Color {\n  return color === WHITE ? BLACK : WHITE\n}\n\nexport function validateFen(fen: string) {\n  // 1st criterion: 6 space-seperated fields?\n  const tokens = fen.split(/\\s+/)\n  if (tokens.length !== 6) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: must contain six space-delimited fields',\n    }\n  }\n\n  // 2nd criterion: move number field is a integer value > 0?\n  const moveNumber = parseInt(tokens[5], 10)\n  if (isNaN(moveNumber) || moveNumber <= 0) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: move number must be a positive integer',\n    }\n  }\n\n  // 3rd criterion: half move counter is an integer >= 0?\n  const halfMoves = parseInt(tokens[4], 10)\n  if (isNaN(halfMoves) || halfMoves < 0) {\n    return {\n      ok: false,\n      error:\n        'Invalid FEN: half move counter number must be a non-negative integer',\n    }\n  }\n\n  // 4th criterion: 4th field is a valid e.p.-string?\n  if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n    return { ok: false, error: 'Invalid FEN: en-passant square is invalid' }\n  }\n\n  // 5th criterion: 3th field is a valid castle-string?\n  if (/[^kKqQ-]/.test(tokens[2])) {\n    return { ok: false, error: 'Invalid FEN: castling availability is invalid' }\n  }\n\n  // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\n  if (!/^(w|b)$/.test(tokens[1])) {\n    return { ok: false, error: 'Invalid FEN: side-to-move is invalid' }\n  }\n\n  // 7th criterion: 1st field contains 8 rows?\n  const rows = tokens[0].split('/')\n  if (rows.length !== 8) {\n    return {\n      ok: false,\n      error: \"Invalid FEN: piece data does not contain 8 '/'-delimited rows\",\n    }\n  }\n\n  // 8th criterion: every row is valid?\n  for (let i = 0; i < rows.length; i++) {\n    // check for right sum of fields AND not two numbers in succession\n    let sumFields = 0\n    let previousWasNumber = false\n\n    for (let k = 0; k < rows[i].length; k++) {\n      if (isDigit(rows[i][k])) {\n        if (previousWasNumber) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (consecutive number)',\n          }\n        }\n        sumFields += parseInt(rows[i][k], 10)\n        previousWasNumber = true\n      } else {\n        if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (invalid piece)',\n          }\n        }\n        sumFields += 1\n        previousWasNumber = false\n      }\n    }\n    if (sumFields !== 8) {\n      return {\n        ok: false,\n        error: 'Invalid FEN: piece data is invalid (too many squares in rank)',\n      }\n    }\n  }\n\n  // 9th criterion: is en-passant square legal?\n  if (\n    (tokens[3][1] == '3' && tokens[1] == 'w') ||\n    (tokens[3][1] == '6' && tokens[1] == 'b')\n  ) {\n    return { ok: false, error: 'Invalid FEN: illegal en-passant square' }\n  }\n\n  // 10th criterion: does chess position contain exact two kings?\n  const kings = [\n    { color: 'white', regex: /K/g },\n    { color: 'black', regex: /k/g },\n  ]\n\n  for (const { color, regex } of kings) {\n    if (!regex.test(tokens[0])) {\n      return { ok: false, error: `Invalid FEN: missing ${color} king` }\n    }\n\n    if ((tokens[0].match(regex) || []).length > 1) {\n      return { ok: false, error: `Invalid FEN: too many ${color} kings` }\n    }\n  }\n\n  // 11th criterion: are any pawns on the first or eighth rows?\n  if (\n    Array.from(rows[0] + rows[7]).some((char) => char.toUpperCase() === 'P')\n  ) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: some pawns are on the edge rows',\n    }\n  }\n\n  return { ok: true }\n}\n\n// this function is used to uniquely identify ambiguous moves\nfunction getDisambiguator(move: InternalMove, moves: InternalMove[]) {\n  const from = move.from\n  const to = move.to\n  const piece = move.piece\n\n  let ambiguities = 0\n  let sameRank = 0\n  let sameFile = 0\n\n  for (let i = 0, len = moves.length; i < len; i++) {\n    const ambigFrom = moves[i].from\n    const ambigTo = moves[i].to\n    const ambigPiece = moves[i].piece\n\n    /*\n     * if a move of the same piece type ends on the same to square, we'll need\n     * to add a disambiguator to the algebraic notation\n     */\n    if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\n      ambiguities++\n\n      if (rank(from) === rank(ambigFrom)) {\n        sameRank++\n      }\n\n      if (file(from) === file(ambigFrom)) {\n        sameFile++\n      }\n    }\n  }\n\n  if (ambiguities > 0) {\n    if (sameRank > 0 && sameFile > 0) {\n      /*\n       * if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      return algebraic(from)\n    } else if (sameFile > 0) {\n      /*\n       * if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      return algebraic(from).charAt(1)\n    } else {\n      // else use the file symbol\n      return algebraic(from).charAt(0)\n    }\n  }\n\n  return ''\n}\n\nfunction addMove(\n  moves: InternalMove[],\n  color: Color,\n  from: number,\n  to: number,\n  piece: PieceSymbol,\n  captured: PieceSymbol | undefined = undefined,\n  flags: number = BITS.NORMAL,\n) {\n  const r = rank(to)\n\n  if (piece === PAWN && (r === RANK_1 || r === RANK_8)) {\n    for (let i = 0; i < PROMOTIONS.length; i++) {\n      const promotion = PROMOTIONS[i]\n      moves.push({\n        color,\n        from,\n        to,\n        piece,\n        captured,\n        promotion,\n        flags: flags | BITS.PROMOTION,\n      })\n    }\n  } else {\n    moves.push({\n      color,\n      from,\n      to,\n      piece,\n      captured,\n      flags,\n    })\n  }\n}\n\nfunction inferPieceType(san: string) {\n  let pieceType = san.charAt(0)\n  if (pieceType >= 'a' && pieceType <= 'h') {\n    const matches = san.match(/[a-h]\\d.*[a-h]\\d/)\n    if (matches) {\n      return undefined\n    }\n    return PAWN\n  }\n  pieceType = pieceType.toLowerCase()\n  if (pieceType === 'o') {\n    return KING\n  }\n  return pieceType as PieceSymbol\n}\n\n// parses all of the decorators out of a SAN string\nfunction strippedSan(move: string) {\n  return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\n}\n\nfunction trimFen(fen: string): string {\n  /*\n   * remove last two fields in FEN string as they're not needed when checking\n   * for repetition\n   */\n  return fen.split(' ').slice(0, 4).join(' ')\n}\n\nexport class Chess {\n  private _board = new Array<Piece>(128)\n  private _turn: Color = WHITE\n  private _header: Record<string, string> = {}\n  private _kings: Record<Color, number> = { w: EMPTY, b: EMPTY }\n  private _epSquare = -1\n  private _halfMoves = 0\n  private _moveNumber = 0\n  private _history: History[] = []\n  private _comments: Record<string, string> = {}\n  private _castling: Record<Color, number> = { w: 0, b: 0 }\n  private _positionCounts: Record<string, number> = {}\n\n  constructor(fen = DEFAULT_POSITION) {\n    this.load(fen)\n  }\n\n  clear({ preserveHeaders = false } = {}) {\n    this._board = new Array<Piece>(128)\n    this._kings = { w: EMPTY, b: EMPTY }\n    this._turn = WHITE\n    this._castling = { w: 0, b: 0 }\n    this._epSquare = EMPTY\n    this._halfMoves = 0\n    this._moveNumber = 1\n    this._history = []\n    this._comments = {}\n    this._header = preserveHeaders ? this._header : {}\n\n    /*\n     * Delete the SetUp and FEN headers (if preserved), the board is empty and\n     * these headers don't make sense in this state. They'll get added later\n     * via .load() or .put()\n     */\n    delete this._header['SetUp']\n    delete this._header['FEN']\n\n    /*\n     * Instantiate a proxy that keeps track of position occurrence counts for the purpose\n     * of repetition checking. The getter and setter methods automatically handle trimming\n     * irrelevent information from the fen, initialising new positions, and removing old\n     * positions from the record if their counts are reduced to 0.\n     */\n    this._positionCounts = new Proxy({} as Record<string, number>, {\n      get: (target, position: string) =>\n        position === 'length'\n          ? Object.keys(target).length // length for unit testing\n          : target?.[trimFen(position)] || 0,\n      set: (target, position: string, count: number) => {\n        const trimmedFen = trimFen(position)\n        if (count === 0) delete target[trimmedFen]\n        else target[trimmedFen] = count\n        return true\n      },\n    })\n  }\n\n  removeHeader(key: string) {\n    if (key in this._header) {\n      delete this._header[key]\n    }\n  }\n\n  load(fen: string, { skipValidation = false, preserveHeaders = false } = {}) {\n    let tokens = fen.split(/\\s+/)\n\n    // append commonly omitted fen tokens\n    if (tokens.length >= 2 && tokens.length < 6) {\n      const adjustments = ['-', '-', '0', '1']\n      fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ')\n    }\n\n    tokens = fen.split(/\\s+/)\n\n    if (!skipValidation) {\n      const { ok, error } = validateFen(fen)\n      if (!ok) {\n        throw new Error(error)\n      }\n    }\n\n    const position = tokens[0]\n    let square = 0\n\n    this.clear({ preserveHeaders })\n\n    for (let i = 0; i < position.length; i++) {\n      const piece = position.charAt(i)\n\n      if (piece === '/') {\n        square += 8\n      } else if (isDigit(piece)) {\n        square += parseInt(piece, 10)\n      } else {\n        const color = piece < 'a' ? WHITE : BLACK\n        this._put(\n          { type: piece.toLowerCase() as PieceSymbol, color },\n          algebraic(square),\n        )\n        square++\n      }\n    }\n\n    this._turn = tokens[1] as Color\n\n    if (tokens[2].indexOf('K') > -1) {\n      this._castling.w |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      this._castling.w |= BITS.QSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      this._castling.b |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      this._castling.b |= BITS.QSIDE_CASTLE\n    }\n\n    this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3] as Square]\n    this._halfMoves = parseInt(tokens[4], 10)\n    this._moveNumber = parseInt(tokens[5], 10)\n\n    this._updateSetup(fen)\n    this._positionCounts[fen]++\n  }\n\n  fen() {\n    let empty = 0\n    let fen = ''\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i]) {\n        if (empty > 0) {\n          fen += empty\n          empty = 0\n        }\n        const { color, type: piece } = this._board[i]\n\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n      } else {\n        empty++\n      }\n\n      if ((i + 1) & 0x88) {\n        if (empty > 0) {\n          fen += empty\n        }\n\n        if (i !== Ox88.h1) {\n          fen += '/'\n        }\n\n        empty = 0\n        i += 8\n      }\n    }\n\n    let castling = ''\n    if (this._castling[WHITE] & BITS.KSIDE_CASTLE) {\n      castling += 'K'\n    }\n    if (this._castling[WHITE] & BITS.QSIDE_CASTLE) {\n      castling += 'Q'\n    }\n    if (this._castling[BLACK] & BITS.KSIDE_CASTLE) {\n      castling += 'k'\n    }\n    if (this._castling[BLACK] & BITS.QSIDE_CASTLE) {\n      castling += 'q'\n    }\n\n    // do we have an empty castling flag?\n    castling = castling || '-'\n\n    let epSquare = '-'\n    /*\n     * only print the ep square if en passant is a valid move (pawn is present\n     * and ep capture is not pinned)\n     */\n    if (this._epSquare !== EMPTY) {\n      const bigPawnSquare = this._epSquare + (this._turn === WHITE ? 16 : -16)\n      const squares = [bigPawnSquare + 1, bigPawnSquare - 1]\n\n      for (const square of squares) {\n        // is the square off the board?\n        if (square & 0x88) {\n          continue\n        }\n\n        const color = this._turn\n\n        // is there a pawn that can capture the epSquare?\n        if (\n          this._board[square]?.color === color &&\n          this._board[square]?.type === PAWN\n        ) {\n          // if the pawn makes an ep capture, does it leave it's king in check?\n          this._makeMove({\n            color,\n            from: square,\n            to: this._epSquare,\n            piece: PAWN,\n            captured: PAWN,\n            flags: BITS.EP_CAPTURE,\n          })\n          const isLegal = !this._isKingAttacked(color)\n          this._undoMove()\n\n          // if ep is legal, break and set the ep square in the FEN output\n          if (isLegal) {\n            epSquare = algebraic(this._epSquare)\n            break\n          }\n        }\n      }\n    }\n\n    return [\n      fen,\n      this._turn,\n      castling,\n      epSquare,\n      this._halfMoves,\n      this._moveNumber,\n    ].join(' ')\n  }\n\n  /*\n   * Called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object. If the FEN\n   * is equal to the default position, the SetUp and FEN are deleted the setup\n   * is only updated if history.length is zero, ie moves haven't been made.\n   */\n  private _updateSetup(fen: string) {\n    if (this._history.length > 0) return\n\n    if (fen !== DEFAULT_POSITION) {\n      this._header['SetUp'] = '1'\n      this._header['FEN'] = fen\n    } else {\n      delete this._header['SetUp']\n      delete this._header['FEN']\n    }\n  }\n\n  reset() {\n    this.load(DEFAULT_POSITION)\n  }\n\n  get(square: Square) {\n    return this._board[Ox88[square]] || false\n  }\n\n  put({ type, color }: { type: PieceSymbol; color: Color }, square: Square) {\n    if (this._put({ type, color }, square)) {\n      this._updateCastlingRights()\n      this._updateEnPassantSquare()\n      this._updateSetup(this.fen())\n      return true\n    }\n    return false\n  }\n\n  private _put(\n    { type, color }: { type: PieceSymbol; color: Color },\n    square: Square,\n  ) {\n    // check for piece\n    if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {\n      return false\n    }\n\n    // check for valid square\n    if (!(square in Ox88)) {\n      return false\n    }\n\n    const sq = Ox88[square]\n\n    // don't let the user place more than one king\n    if (\n      type == KING &&\n      !(this._kings[color] == EMPTY || this._kings[color] == sq)\n    ) {\n      return false\n    }\n\n    const currentPieceOnSquare = this._board[sq]\n\n    // if one of the kings will be replaced by the piece from args, set the `_kings` respective entry to `EMPTY`\n    if (currentPieceOnSquare && currentPieceOnSquare.type === KING) {\n      this._kings[currentPieceOnSquare.color] = EMPTY\n    }\n\n    this._board[sq] = { type: type as PieceSymbol, color: color as Color }\n\n    if (type === KING) {\n      this._kings[color] = sq\n    }\n\n    return true\n  }\n\n  remove(square: Square) {\n    const piece = this.get(square)\n    delete this._board[Ox88[square]]\n    if (piece && piece.type === KING) {\n      this._kings[piece.color] = EMPTY\n    }\n\n    this._updateCastlingRights()\n    this._updateEnPassantSquare()\n    this._updateSetup(this.fen())\n\n    return piece\n  }\n\n  private _updateCastlingRights() {\n    const whiteKingInPlace =\n      this._board[Ox88.e1]?.type === KING &&\n      this._board[Ox88.e1]?.color === WHITE\n    const blackKingInPlace =\n      this._board[Ox88.e8]?.type === KING &&\n      this._board[Ox88.e8]?.color === BLACK\n\n    if (\n      !whiteKingInPlace ||\n      this._board[Ox88.a1]?.type !== ROOK ||\n      this._board[Ox88.a1]?.color !== WHITE\n    ) {\n      this._castling.w &= ~BITS.QSIDE_CASTLE\n    }\n\n    if (\n      !whiteKingInPlace ||\n      this._board[Ox88.h1]?.type !== ROOK ||\n      this._board[Ox88.h1]?.color !== WHITE\n    ) {\n      this._castling.w &= ~BITS.KSIDE_CASTLE\n    }\n\n    if (\n      !blackKingInPlace ||\n      this._board[Ox88.a8]?.type !== ROOK ||\n      this._board[Ox88.a8]?.color !== BLACK\n    ) {\n      this._castling.b &= ~BITS.QSIDE_CASTLE\n    }\n\n    if (\n      !blackKingInPlace ||\n      this._board[Ox88.h8]?.type !== ROOK ||\n      this._board[Ox88.h8]?.color !== BLACK\n    ) {\n      this._castling.b &= ~BITS.KSIDE_CASTLE\n    }\n  }\n\n  private _updateEnPassantSquare() {\n    if (this._epSquare === EMPTY) {\n      return\n    }\n\n    const startSquare = this._epSquare + (this._turn === WHITE ? -16 : 16)\n    const currentSquare = this._epSquare + (this._turn === WHITE ? 16 : -16)\n    const attackers = [currentSquare + 1, currentSquare - 1]\n\n    if (\n      this._board[startSquare] !== null ||\n      this._board[this._epSquare] !== null ||\n      this._board[currentSquare]?.color !== swapColor(this._turn) ||\n      this._board[currentSquare]?.type !== PAWN\n    ) {\n      this._epSquare = EMPTY\n      return\n    }\n\n    const canCapture = (square: number) =>\n      !(square & 0x88) &&\n      this._board[square]?.color === this._turn &&\n      this._board[square]?.type === PAWN\n\n    if (!attackers.some(canCapture)) {\n      this._epSquare = EMPTY\n    }\n  }\n\n  private _attacked(color: Color, square: number) {\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // did we run off the end of the board\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      // if empty square or wrong color\n      if (this._board[i] === undefined || this._board[i].color !== color) {\n        continue\n      }\n\n      const piece = this._board[i]\n      const difference = i - square\n\n      // skip - to/from square are the same\n      if (difference === 0) {\n        continue\n      }\n\n      const index = difference + 119\n\n      if (ATTACKS[index] & PIECE_MASKS[piece.type]) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true\n          } else {\n            if (piece.color === BLACK) return true\n          }\n          continue\n        }\n\n        // if the piece is a knight or a king\n        if (piece.type === 'n' || piece.type === 'k') return true\n\n        const offset = RAYS[index]\n        let j = i + offset\n\n        let blocked = false\n        while (j !== square) {\n          if (this._board[j] != null) {\n            blocked = true\n            break\n          }\n          j += offset\n        }\n\n        if (!blocked) return true\n      }\n    }\n\n    return false\n  }\n\n  private _isKingAttacked(color: Color) {\n    const square = this._kings[color]\n    return square === -1 ? false : this._attacked(swapColor(color), square)\n  }\n\n  isAttacked(square: Square, attackedBy: Color) {\n    return this._attacked(attackedBy, Ox88[square])\n  }\n\n  isCheck() {\n    return this._isKingAttacked(this._turn)\n  }\n\n  inCheck() {\n    return this.isCheck()\n  }\n\n  isCheckmate() {\n    return this.isCheck() && this._moves().length === 0\n  }\n\n  isStalemate() {\n    return !this.isCheck() && this._moves().length === 0\n  }\n\n  isInsufficientMaterial() {\n    /*\n     * k.b. vs k.b. (of opposite colors) with mate in 1:\n     * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1\n     *\n     * k.b. vs k.n. with mate in 1:\n     * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1\n     */\n    const pieces: Record<PieceSymbol, number> = {\n      b: 0,\n      n: 0,\n      r: 0,\n      q: 0,\n      k: 0,\n      p: 0,\n    }\n    const bishops = []\n    let numPieces = 0\n    let squareColor = 0\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      squareColor = (squareColor + 1) % 2\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      const piece = this._board[i]\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1\n        if (piece.type === BISHOP) {\n          bishops.push(squareColor)\n        }\n        numPieces++\n      }\n    }\n\n    // k vs. k\n    if (numPieces === 2) {\n      return true\n    } else if (\n      // k vs. kn .... or .... k vs. kb\n      numPieces === 3 &&\n      (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)\n    ) {\n      return true\n    } else if (numPieces === pieces[BISHOP] + 2) {\n      // kb vs. kb where any number of bishops are all on the same color\n      let sum = 0\n      const len = bishops.length\n      for (let i = 0; i < len; i++) {\n        sum += bishops[i]\n      }\n      if (sum === 0 || sum === len) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  private _getRepetitionCount() {\n    return this._positionCounts[this.fen()]\n  }\n\n  isThreefoldRepetition(): boolean {\n    return this._getRepetitionCount() >= 3\n  }\n\n  isDraw() {\n    return (\n      this._halfMoves >= 100 || // 50 moves per side = 100 half moves\n      this.isStalemate() ||\n      this.isInsufficientMaterial() ||\n      this.isThreefoldRepetition()\n    )\n  }\n\n  isGameOver() {\n    return this.isCheckmate() || this.isStalemate() || this.isDraw()\n  }\n\n  moves(): string[]\n  moves({ square }: { square: Square }): string[]\n  moves({ piece }: { piece: PieceSymbol }): string[]\n\n  moves({ square, piece }: { square: Square; piece: PieceSymbol }): string[]\n\n  moves({ verbose, square }: { verbose: true; square?: Square }): Move[]\n  moves({ verbose, square }: { verbose: false; square?: Square }): string[]\n  moves({\n    verbose,\n    square,\n  }: {\n    verbose?: boolean\n    square?: Square\n  }): string[] | Move[]\n\n  moves({ verbose, piece }: { verbose: true; piece?: PieceSymbol }): Move[]\n  moves({ verbose, piece }: { verbose: false; piece?: PieceSymbol }): string[]\n  moves({\n    verbose,\n    piece,\n  }: {\n    verbose?: boolean\n    piece?: PieceSymbol\n  }): string[] | Move[]\n\n  moves({\n    verbose,\n    square,\n    piece,\n  }: {\n    verbose: true\n    square?: Square\n    piece?: PieceSymbol\n  }): Move[]\n  moves({\n    verbose,\n    square,\n    piece,\n  }: {\n    verbose: false\n    square?: Square\n    piece?: PieceSymbol\n  }): string[]\n  moves({\n    verbose,\n    square,\n    piece,\n  }: {\n    verbose?: boolean\n    square?: Square\n    piece?: PieceSymbol\n  }): string[] | Move[]\n\n  moves({ square, piece }: { square?: Square; piece?: PieceSymbol }): Move[]\n\n  moves({\n    verbose = false,\n    square = undefined,\n    piece = undefined,\n  }: { verbose?: boolean; square?: Square; piece?: PieceSymbol } = {}) {\n    const moves = this._moves({ square, piece })\n\n    if (verbose) {\n      return moves.map((move) => this._makePretty(move))\n    } else {\n      return moves.map((move) => this._moveToSan(move, moves))\n    }\n  }\n\n  private _moves({\n    legal = true,\n    piece = undefined,\n    square = undefined,\n  }: {\n    legal?: boolean\n    piece?: PieceSymbol\n    square?: Square\n  } = {}) {\n    const forSquare = square ? (square.toLowerCase() as Square) : undefined\n    const forPiece = piece?.toLowerCase()\n\n    const moves: InternalMove[] = []\n    const us = this._turn\n    const them = swapColor(us)\n\n    let firstSquare = Ox88.a8\n    let lastSquare = Ox88.h1\n    let singleSquare = false\n\n    // are we generating moves for a single square?\n    if (forSquare) {\n      // illegal square, return empty moves\n      if (!(forSquare in Ox88)) {\n        return []\n      } else {\n        firstSquare = lastSquare = Ox88[forSquare]\n        singleSquare = true\n      }\n    }\n\n    for (let from = firstSquare; from <= lastSquare; from++) {\n      // did we run off the end of the board\n      if (from & 0x88) {\n        from += 7\n        continue\n      }\n\n      // empty square or opponent, skip\n      if (!this._board[from] || this._board[from].color === them) {\n        continue\n      }\n      const { type } = this._board[from]\n\n      let to: number\n      if (type === PAWN) {\n        if (forPiece && forPiece !== type) continue\n\n        // single square, non-capturing\n        to = from + PAWN_OFFSETS[us][0]\n        if (!this._board[to]) {\n          addMove(moves, us, from, to, PAWN)\n\n          // double square\n          to = from + PAWN_OFFSETS[us][1]\n          if (SECOND_RANK[us] === rank(from) && !this._board[to]) {\n            addMove(moves, us, from, to, PAWN, undefined, BITS.BIG_PAWN)\n          }\n        }\n\n        // pawn captures\n        for (let j = 2; j < 4; j++) {\n          to = from + PAWN_OFFSETS[us][j]\n          if (to & 0x88) continue\n\n          if (this._board[to]?.color === them) {\n            addMove(\n              moves,\n              us,\n              from,\n              to,\n              PAWN,\n              this._board[to].type,\n              BITS.CAPTURE,\n            )\n          } else if (to === this._epSquare) {\n            addMove(moves, us, from, to, PAWN, PAWN, BITS.EP_CAPTURE)\n          }\n        }\n      } else {\n        if (forPiece && forPiece !== type) continue\n\n        for (let j = 0, len = PIECE_OFFSETS[type].length; j < len; j++) {\n          const offset = PIECE_OFFSETS[type][j]\n          to = from\n\n          while (true) {\n            to += offset\n            if (to & 0x88) break\n\n            if (!this._board[to]) {\n              addMove(moves, us, from, to, type)\n            } else {\n              // own color, stop loop\n              if (this._board[to].color === us) break\n\n              addMove(\n                moves,\n                us,\n                from,\n                to,\n                type,\n                this._board[to].type,\n                BITS.CAPTURE,\n              )\n              break\n            }\n\n            /* break, if knight or king */\n            if (type === KNIGHT || type === KING) break\n          }\n        }\n      }\n    }\n\n    /*\n     * check for castling if we're:\n     *   a) generating all moves, or\n     *   b) doing single square move generation on the king's square\n     */\n\n    if (forPiece === undefined || forPiece === KING) {\n      if (!singleSquare || lastSquare === this._kings[us]) {\n        // king-side castling\n        if (this._castling[us] & BITS.KSIDE_CASTLE) {\n          const castlingFrom = this._kings[us]\n          const castlingTo = castlingFrom + 2\n\n          if (\n            !this._board[castlingFrom + 1] &&\n            !this._board[castlingTo] &&\n            !this._attacked(them, this._kings[us]) &&\n            !this._attacked(them, castlingFrom + 1) &&\n            !this._attacked(them, castlingTo)\n          ) {\n            addMove(\n              moves,\n              us,\n              this._kings[us],\n              castlingTo,\n              KING,\n              undefined,\n              BITS.KSIDE_CASTLE,\n            )\n          }\n        }\n\n        // queen-side castling\n        if (this._castling[us] & BITS.QSIDE_CASTLE) {\n          const castlingFrom = this._kings[us]\n          const castlingTo = castlingFrom - 2\n\n          if (\n            !this._board[castlingFrom - 1] &&\n            !this._board[castlingFrom - 2] &&\n            !this._board[castlingFrom - 3] &&\n            !this._attacked(them, this._kings[us]) &&\n            !this._attacked(them, castlingFrom - 1) &&\n            !this._attacked(them, castlingTo)\n          ) {\n            addMove(\n              moves,\n              us,\n              this._kings[us],\n              castlingTo,\n              KING,\n              undefined,\n              BITS.QSIDE_CASTLE,\n            )\n          }\n        }\n      }\n    }\n\n    /*\n     * return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal || this._kings[us] === -1) {\n      return moves\n    }\n\n    // filter out illegal moves\n    const legalMoves = []\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i])\n      if (!this._isKingAttacked(us)) {\n        legalMoves.push(moves[i])\n      }\n      this._undoMove()\n    }\n\n    return legalMoves\n  }\n\n  move(\n    move: string | { from: string; to: string; promotion?: string },\n    { strict = false }: { strict?: boolean } = {},\n  ) {\n    /*\n     * The move function can be called with in the following parameters:\n     *\n     * .move('Nxb7')       <- argument is a case-sensitive SAN string\n     *\n     * .move({ from: 'h7', <- argument is a move object\n     *         to :'h8',\n     *         promotion: 'q' })\n     *\n     *\n     * An optional strict argument may be supplied to tell chess.js to\n     * strictly follow the SAN specification.\n     */\n\n    let moveObj = null\n\n    if (typeof move === 'string') {\n      moveObj = this._moveFromSan(move, strict)\n    } else if (typeof move === 'object') {\n      const moves = this._moves()\n\n      // convert the pretty move object to an ugly move object\n      for (let i = 0, len = moves.length; i < len; i++) {\n        if (\n          move.from === algebraic(moves[i].from) &&\n          move.to === algebraic(moves[i].to) &&\n          (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)\n        ) {\n          moveObj = moves[i]\n          break\n        }\n      }\n    }\n\n    // failed to find move\n    if (!moveObj) {\n      if (typeof move === 'string') {\n        throw new Error(`Invalid move: ${move}`)\n      } else {\n        throw new Error(`Invalid move: ${JSON.stringify(move)}`)\n      }\n    }\n\n    /*\n     * need to make a copy of move because we can't generate SAN after the move\n     * is made\n     */\n    const prettyMove = this._makePretty(moveObj)\n\n    this._makeMove(moveObj)\n    this._positionCounts[prettyMove.after]++\n    return prettyMove\n  }\n\n  private _push(move: InternalMove) {\n    this._history.push({\n      move,\n      kings: { b: this._kings.b, w: this._kings.w },\n      turn: this._turn,\n      castling: { b: this._castling.b, w: this._castling.w },\n      epSquare: this._epSquare,\n      halfMoves: this._halfMoves,\n      moveNumber: this._moveNumber,\n    })\n  }\n\n  private _makeMove(move: InternalMove) {\n    const us = this._turn\n    const them = swapColor(us)\n    this._push(move)\n\n    this._board[move.to] = this._board[move.from]\n    delete this._board[move.from]\n\n    // if ep capture, remove the captured pawn\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (this._turn === BLACK) {\n        delete this._board[move.to - 16]\n      } else {\n        delete this._board[move.to + 16]\n      }\n    }\n\n    // if pawn promotion, replace with new piece\n    if (move.promotion) {\n      this._board[move.to] = { type: move.promotion, color: us }\n    }\n\n    // if we moved the king\n    if (this._board[move.to].type === KING) {\n      this._kings[us] = move.to\n\n      // if we castled, move the rook next to the king\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        const castlingTo = move.to - 1\n        const castlingFrom = move.to + 1\n        this._board[castlingTo] = this._board[castlingFrom]\n        delete this._board[castlingFrom]\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        const castlingTo = move.to + 1\n        const castlingFrom = move.to - 2\n        this._board[castlingTo] = this._board[castlingFrom]\n        delete this._board[castlingFrom]\n      }\n\n      // turn off castling\n      this._castling[us] = 0\n    }\n\n    // turn off castling if we move a rook\n    if (this._castling[us]) {\n      for (let i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (\n          move.from === ROOKS[us][i].square &&\n          this._castling[us] & ROOKS[us][i].flag\n        ) {\n          this._castling[us] ^= ROOKS[us][i].flag\n          break\n        }\n      }\n    }\n\n    // turn off castling if we capture a rook\n    if (this._castling[them]) {\n      for (let i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (\n          move.to === ROOKS[them][i].square &&\n          this._castling[them] & ROOKS[them][i].flag\n        ) {\n          this._castling[them] ^= ROOKS[them][i].flag\n          break\n        }\n      }\n    }\n\n    // if big pawn move, update the en passant square\n    if (move.flags & BITS.BIG_PAWN) {\n      if (us === BLACK) {\n        this._epSquare = move.to - 16\n      } else {\n        this._epSquare = move.to + 16\n      }\n    } else {\n      this._epSquare = EMPTY\n    }\n\n    // reset the 50 move counter if a pawn is moved or a piece is captured\n    if (move.piece === PAWN) {\n      this._halfMoves = 0\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      this._halfMoves = 0\n    } else {\n      this._halfMoves++\n    }\n\n    if (us === BLACK) {\n      this._moveNumber++\n    }\n\n    this._turn = them\n  }\n\n  undo() {\n    const move = this._undoMove()\n    if (move) {\n      const prettyMove = this._makePretty(move)\n      this._positionCounts[prettyMove.after]--\n      return prettyMove\n    }\n    return null\n  }\n\n  private _undoMove() {\n    const old = this._history.pop()\n    if (old === undefined) {\n      return null\n    }\n\n    const move = old.move\n\n    this._kings = old.kings\n    this._turn = old.turn\n    this._castling = old.castling\n    this._epSquare = old.epSquare\n    this._halfMoves = old.halfMoves\n    this._moveNumber = old.moveNumber\n\n    const us = this._turn\n    const them = swapColor(us)\n\n    this._board[move.from] = this._board[move.to]\n    this._board[move.from].type = move.piece // to undo any promotions\n    delete this._board[move.to]\n\n    if (move.captured) {\n      if (move.flags & BITS.EP_CAPTURE) {\n        // en passant capture\n        let index: number\n        if (us === BLACK) {\n          index = move.to - 16\n        } else {\n          index = move.to + 16\n        }\n        this._board[index] = { type: PAWN, color: them }\n      } else {\n        // regular capture\n        this._board[move.to] = { type: move.captured, color: them }\n      }\n    }\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      let castlingTo: number, castlingFrom: number\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castlingTo = move.to + 1\n        castlingFrom = move.to - 1\n      } else {\n        castlingTo = move.to - 2\n        castlingFrom = move.to + 1\n      }\n\n      this._board[castlingTo] = this._board[castlingFrom]\n      delete this._board[castlingFrom]\n    }\n\n    return move\n  }\n\n  pgn({\n    newline = '\\n',\n    maxWidth = 0,\n  }: { newline?: string; maxWidth?: number } = {}) {\n    /*\n     * using the specification from http://www.chessclub.com/help/PGN-spec\n     * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n     */\n\n    const result: string[] = []\n    let headerExists = false\n\n    /* add the PGN header information */\n    for (const i in this._header) {\n      /*\n       * TODO: order of enumerated properties in header object is not\n       * guaranteed, see ECMA-262 spec (section 12.6.4)\n       */\n      result.push('[' + i + ' \"' + this._header[i] + '\"]' + newline)\n      headerExists = true\n    }\n\n    if (headerExists && this._history.length) {\n      result.push(newline)\n    }\n\n    const appendComment = (moveString: string) => {\n      const comment = this._comments[this.fen()]\n      if (typeof comment !== 'undefined') {\n        const delimiter = moveString.length > 0 ? ' ' : ''\n        moveString = `${moveString}${delimiter}{${comment}}`\n      }\n      return moveString\n    }\n\n    // pop all of history onto reversed_history\n    const reversedHistory = []\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    const moves = []\n    let moveString = ''\n\n    // special case of a commented starting position with no moves\n    if (reversedHistory.length === 0) {\n      moves.push(appendComment(''))\n    }\n\n    // build the list of moves.  a move_string looks like: \"3. e3 e6\"\n    while (reversedHistory.length > 0) {\n      moveString = appendComment(moveString)\n      const move = reversedHistory.pop()\n\n      // make TypeScript stop complaining about move being undefined\n      if (!move) {\n        break\n      }\n\n      // if the position started with black to move, start PGN with #. ...\n      if (!this._history.length && move.color === 'b') {\n        const prefix = `${this._moveNumber}. ...`\n        // is there a comment preceding the first move?\n        moveString = moveString ? `${moveString} ${prefix}` : prefix\n      } else if (move.color === 'w') {\n        // store the previous generated move_string if we have one\n        if (moveString.length) {\n          moves.push(moveString)\n        }\n        moveString = this._moveNumber + '.'\n      }\n\n      moveString =\n        moveString + ' ' + this._moveToSan(move, this._moves({ legal: true }))\n      this._makeMove(move)\n    }\n\n    // are there any other leftover moves?\n    if (moveString.length) {\n      moves.push(appendComment(moveString))\n    }\n\n    // is there a result?\n    if (typeof this._header.Result !== 'undefined') {\n      moves.push(this._header.Result)\n    }\n\n    /*\n     * history should be back to what it was before we started generating PGN,\n     * so join together moves\n     */\n    if (maxWidth === 0) {\n      return result.join('') + moves.join(' ')\n    }\n\n    // TODO (jah): huh?\n    const strip = function () {\n      if (result.length > 0 && result[result.length - 1] === ' ') {\n        result.pop()\n        return true\n      }\n      return false\n    }\n\n    // NB: this does not preserve comment whitespace.\n    const wrapComment = function (width: number, move: string) {\n      for (const token of move.split(' ')) {\n        if (!token) {\n          continue\n        }\n        if (width + token.length > maxWidth) {\n          while (strip()) {\n            width--\n          }\n          result.push(newline)\n          width = 0\n        }\n        result.push(token)\n        width += token.length\n        result.push(' ')\n        width++\n      }\n      if (strip()) {\n        width--\n      }\n      return width\n    }\n\n    // wrap the PGN output at max_width\n    let currentWidth = 0\n    for (let i = 0; i < moves.length; i++) {\n      if (currentWidth + moves[i].length > maxWidth) {\n        if (moves[i].includes('{')) {\n          currentWidth = wrapComment(currentWidth, moves[i])\n          continue\n        }\n      }\n      // if the current move will push past max_width\n      if (currentWidth + moves[i].length > maxWidth && i !== 0) {\n        // don't end the line with whitespace\n        if (result[result.length - 1] === ' ') {\n          result.pop()\n        }\n\n        result.push(newline)\n        currentWidth = 0\n      } else if (i !== 0) {\n        result.push(' ')\n        currentWidth++\n      }\n      result.push(moves[i])\n      currentWidth += moves[i].length\n    }\n\n    return result.join('')\n  }\n\n  header(...args: string[]) {\n    for (let i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        this._header[args[i]] = args[i + 1]\n      }\n    }\n    return this._header\n  }\n\n  loadPgn(\n    pgn: string,\n    {\n      strict = false,\n      newlineChar = '\\r?\\n',\n    }: { strict?: boolean; newlineChar?: string } = {},\n  ) {\n    function mask(str: string): string {\n      return str.replace(/\\\\/g, '\\\\')\n    }\n\n    function parsePgnHeader(header: string): { [key: string]: string } {\n      const headerObj: Record<string, string> = {}\n      const headers = header.split(new RegExp(mask(newlineChar)))\n      let key = ''\n      let value = ''\n\n      for (let i = 0; i < headers.length; i++) {\n        const regex = /^\\s*\\[\\s*([A-Za-z]+)\\s*\"(.*)\"\\s*\\]\\s*$/\n        key = headers[i].replace(regex, '$1')\n        value = headers[i].replace(regex, '$2')\n        if (key.trim().length > 0) {\n          headerObj[key] = value\n        }\n      }\n\n      return headerObj\n    }\n\n    // strip whitespace from head/tail of PGN block\n    pgn = pgn.trim()\n\n    /*\n     * RegExp to split header. Takes advantage of the fact that header and movetext\n     * will always have a blank line between them (ie, two newline_char's). Handles\n     * case where movetext is empty by matching newlineChar until end of string is\n     * matched - effectively trimming from the end extra newlineChar.\n     *\n     * With default newline_char, will equal:\n     * /^(\\[((?:\\r?\\n)|.)*\\])((?:\\s*\\r?\\n){2}|(?:\\s*\\r?\\n)*$)/\n     */\n    const headerRegex = new RegExp(\n      '^(\\\\[((?:' +\n        mask(newlineChar) +\n        ')|.)*\\\\])' +\n        '((?:\\\\s*' +\n        mask(newlineChar) +\n        '){2}|(?:\\\\s*' +\n        mask(newlineChar) +\n        ')*$)',\n    )\n\n    // If no header given, begin with moves.\n    const headerRegexResults = headerRegex.exec(pgn)\n    const headerString = headerRegexResults\n      ? headerRegexResults.length >= 2\n        ? headerRegexResults[1]\n        : ''\n      : ''\n\n    // Put the board in the starting position\n    this.reset()\n\n    // parse PGN header\n    const headers = parsePgnHeader(headerString)\n    let fen = ''\n\n    for (const key in headers) {\n      // check to see user is including fen (possibly with wrong tag case)\n      if (key.toLowerCase() === 'fen') {\n        fen = headers[key]\n      }\n\n      this.header(key, headers[key])\n    }\n\n    /*\n     * the permissive parser should attempt to load a fen tag, even if it's the\n     * wrong case and doesn't include a corresponding [SetUp \"1\"] tag\n     */\n    if (!strict) {\n      if (fen) {\n        this.load(fen, { preserveHeaders: true })\n      }\n    } else {\n      /*\n       * strict parser - load the starting position indicated by [Setup '1']\n       * and [FEN position]\n       */\n      if (headers['SetUp'] === '1') {\n        if (!('FEN' in headers)) {\n          throw new Error(\n            'Invalid PGN: FEN tag must be supplied with SetUp tag',\n          )\n        }\n        // don't clear the headers when loading\n        this.load(headers['FEN'], { preserveHeaders: true })\n      }\n    }\n\n    /*\n     * NB: the regexes below that delete move numbers, recursive annotations,\n     * and numeric annotation glyphs may also match text in comments. To\n     * prevent this, we transform comments by hex-encoding them in place and\n     * decoding them again after the other tokens have been deleted.\n     *\n     * While the spec states that PGN files should be ASCII encoded, we use\n     * {en,de}codeURIComponent here to support arbitrary UTF8 as a convenience\n     * for modern users\n     */\n\n    function toHex(s: string): string {\n      return Array.from(s)\n        .map(function (c) {\n          /*\n           * encodeURI doesn't transform most ASCII characters, so we handle\n           * these ourselves\n           */\n          return c.charCodeAt(0) < 128\n            ? c.charCodeAt(0).toString(16)\n            : encodeURIComponent(c).replace(/%/g, '').toLowerCase()\n        })\n        .join('')\n    }\n\n    function fromHex(s: string): string {\n      return s.length == 0\n        ? ''\n        : decodeURIComponent('%' + (s.match(/.{1,2}/g) || []).join('%'))\n    }\n\n    const encodeComment = function (s: string) {\n      s = s.replace(new RegExp(mask(newlineChar), 'g'), ' ')\n      return `{${toHex(s.slice(1, s.length - 1))}}`\n    }\n\n    const decodeComment = function (s: string) {\n      if (s.startsWith('{') && s.endsWith('}')) {\n        return fromHex(s.slice(1, s.length - 1))\n      }\n    }\n\n    // delete header to get the moves\n    let ms = pgn\n      .replace(headerString, '')\n      .replace(\n        // encode comments so they don't get deleted below\n        new RegExp(`({[^}]*})+?|;([^${mask(newlineChar)}]*)`, 'g'),\n        function (_match, bracket, semicolon) {\n          return bracket !== undefined\n            ? encodeComment(bracket)\n            : ' ' + encodeComment(`{${semicolon.slice(1)}}`)\n        },\n      )\n      .replace(new RegExp(mask(newlineChar), 'g'), ' ')\n\n    // delete recursive annotation variations\n    const ravRegex = /(\\([^()]+\\))+?/g\n    while (ravRegex.test(ms)) {\n      ms = ms.replace(ravRegex, '')\n    }\n\n    // delete move numbers\n    ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '')\n\n    // delete ... indicating black to move\n    ms = ms.replace(/\\.\\.\\./g, '')\n\n    /* delete numeric annotation glyphs */\n    ms = ms.replace(/\\$\\d+/g, '')\n\n    // trim and get array of moves\n    let moves = ms.trim().split(new RegExp(/\\s+/))\n\n    // delete empty entries\n    moves = moves.filter((move) => move !== '')\n\n    let result = ''\n\n    for (let halfMove = 0; halfMove < moves.length; halfMove++) {\n      const comment = decodeComment(moves[halfMove])\n      if (comment !== undefined) {\n        this._comments[this.fen()] = comment\n        continue\n      }\n\n      const move = this._moveFromSan(moves[halfMove], strict)\n\n      // invalid move\n      if (move == null) {\n        // was the move an end of game marker\n        if (TERMINATION_MARKERS.indexOf(moves[halfMove]) > -1) {\n          result = moves[halfMove]\n        } else {\n          throw new Error(`Invalid move in PGN: ${moves[halfMove]}`)\n        }\n      } else {\n        // reset the end of game marker if making a valid move\n        result = ''\n        this._makeMove(move)\n        this._positionCounts[this.fen()]++\n      }\n    }\n\n    /*\n     * Per section 8.2.6 of the PGN spec, the Result tag pair must match match\n     * the termination marker. Only do this when headers are present, but the\n     * result tag is missing\n     */\n\n    if (result && Object.keys(this._header).length && !this._header['Result']) {\n      this.header('Result', result)\n    }\n  }\n\n  /*\n   * Convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} strict Use the strict SAN parser. It will throw errors\n   * on overly disambiguated moves (see below):\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n\n  private _moveToSan(move: InternalMove, moves: InternalMove[]) {\n    let output = ''\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O'\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O'\n    } else {\n      if (move.piece !== PAWN) {\n        const disambiguator = getDisambiguator(move, moves)\n        output += move.piece.toUpperCase() + disambiguator\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0]\n        }\n        output += 'x'\n      }\n\n      output += algebraic(move.to)\n\n      if (move.promotion) {\n        output += '=' + move.promotion.toUpperCase()\n      }\n    }\n\n    this._makeMove(move)\n    if (this.isCheck()) {\n      if (this.isCheckmate()) {\n        output += '#'\n      } else {\n        output += '+'\n      }\n    }\n    this._undoMove()\n\n    return output\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  private _moveFromSan(move: string, strict = false): InternalMove | null {\n    // strip off any move decorations: e.g Nf3+?! becomes Nf3\n    const cleanMove = strippedSan(move)\n\n    let pieceType = inferPieceType(cleanMove)\n    let moves = this._moves({ legal: true, piece: pieceType })\n\n    // strict parser\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {\n        return moves[i]\n      }\n    }\n\n    // the strict parser failed\n    if (strict) {\n      return null\n    }\n\n    let piece = undefined\n    let matches = undefined\n    let from = undefined\n    let to = undefined\n    let promotion = undefined\n\n    /*\n     * The default permissive (non-strict) parser allows the user to parse\n     * non-standard chess notations. This parser is only run after the strict\n     * Standard Algebraic Notation (SAN) parser has failed.\n     *\n     * When running the permissive parser, we'll run a regex to grab the piece, the\n     * to/from square, and an optional promotion piece. This regex will\n     * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n     * f7f8q, b1c3\n     *\n     * NOTE: Some positions and moves may be ambiguous when using the permissive\n     * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,\n     * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop\n     * move). In these cases, the permissive parser will default to the most\n     * basic interpretation (which is b1c3 parsing to Nc3).\n     */\n\n    let overlyDisambiguated = false\n\n    matches = cleanMove.match(\n      /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/,\n      //     piece         from              to       promotion\n    )\n\n    if (matches) {\n      piece = matches[1]\n      from = matches[2] as Square\n      to = matches[3] as Square\n      promotion = matches[4]\n\n      if (from.length == 1) {\n        overlyDisambiguated = true\n      }\n    } else {\n      /*\n       * The [a-h]?[1-8]? portion of the regex below handles moves that may be\n       * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when\n       * there is one legal knight move to e7). In this case, the value of\n       * 'from' variable will be a rank or file, not a square.\n       */\n\n      matches = cleanMove.match(\n        /([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/,\n      )\n\n      if (matches) {\n        piece = matches[1]\n        from = matches[2] as Square\n        to = matches[3] as Square\n        promotion = matches[4]\n\n        if (from.length == 1) {\n          overlyDisambiguated = true\n        }\n      }\n    }\n\n    pieceType = inferPieceType(cleanMove)\n    moves = this._moves({\n      legal: true,\n      piece: piece ? (piece as PieceSymbol) : pieceType,\n    })\n\n    if (!to) {\n      return null\n    }\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (!from) {\n        // if there is no from square, it could be just 'x' missing from a capture\n        if (\n          cleanMove ===\n          strippedSan(this._moveToSan(moves[i], moves)).replace('x', '')\n        ) {\n          return moves[i]\n        }\n        // hand-compare move properties with the results from our permissive regex\n      } else if (\n        (!piece || piece.toLowerCase() == moves[i].piece) &&\n        Ox88[from] == moves[i].from &&\n        Ox88[to] == moves[i].to &&\n        (!promotion || promotion.toLowerCase() == moves[i].promotion)\n      ) {\n        return moves[i]\n      } else if (overlyDisambiguated) {\n        /*\n         * SPECIAL CASE: we parsed a move string that may have an unneeded\n         * rank/file disambiguator (e.g. Nge7).  The 'from' variable will\n         */\n\n        const square = algebraic(moves[i].from)\n        if (\n          (!piece || piece.toLowerCase() == moves[i].piece) &&\n          Ox88[to] == moves[i].to &&\n          (from == square[0] || from == square[1]) &&\n          (!promotion || promotion.toLowerCase() == moves[i].promotion)\n        ) {\n          return moves[i]\n        }\n      }\n    }\n\n    return null\n  }\n\n  ascii() {\n    let s = '   +------------------------+\\n'\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // display the rank\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |'\n      }\n\n      if (this._board[i]) {\n        const piece = this._board[i].type\n        const color = this._board[i].color\n        const symbol =\n          color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n        s += ' ' + symbol + ' '\n      } else {\n        s += ' . '\n      }\n\n      if ((i + 1) & 0x88) {\n        s += '|\\n'\n        i += 8\n      }\n    }\n    s += '   +------------------------+\\n'\n    s += '     a  b  c  d  e  f  g  h'\n\n    return s\n  }\n\n  perft(depth: number) {\n    const moves = this._moves({ legal: false })\n    let nodes = 0\n    const color = this._turn\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i])\n      if (!this._isKingAttacked(color)) {\n        if (depth - 1 > 0) {\n          nodes += this.perft(depth - 1)\n        } else {\n          nodes++\n        }\n      }\n      this._undoMove()\n    }\n\n    return nodes\n  }\n\n  // pretty = external move object\n  private _makePretty(uglyMove: InternalMove): Move {\n    const { color, piece, from, to, flags, captured, promotion } = uglyMove\n\n    let prettyFlags = ''\n\n    for (const flag in BITS) {\n      if (BITS[flag] & flags) {\n        prettyFlags += FLAGS[flag]\n      }\n    }\n\n    const fromAlgebraic = algebraic(from)\n    const toAlgebraic = algebraic(to)\n\n    const move: Move = {\n      color,\n      piece,\n      from: fromAlgebraic,\n      to: toAlgebraic,\n      san: this._moveToSan(uglyMove, this._moves({ legal: true })),\n      flags: prettyFlags,\n      lan: fromAlgebraic + toAlgebraic,\n      before: this.fen(),\n      after: '',\n    }\n\n    // generate the FEN for the 'after' key\n    this._makeMove(uglyMove)\n    move.after = this.fen()\n    this._undoMove()\n\n    if (captured) {\n      move.captured = captured\n    }\n    if (promotion) {\n      move.promotion = promotion\n      move.lan += promotion\n    }\n\n    return move\n  }\n\n  turn() {\n    return this._turn\n  }\n\n  board() {\n    const output = []\n    let row = []\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i] == null) {\n        row.push(null)\n      } else {\n        row.push({\n          square: algebraic(i),\n          type: this._board[i].type,\n          color: this._board[i].color,\n        })\n      }\n      if ((i + 1) & 0x88) {\n        output.push(row)\n        row = []\n        i += 8\n      }\n    }\n\n    return output\n  }\n\n  squareColor(square: Square) {\n    if (square in Ox88) {\n      const sq = Ox88[square]\n      return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark'\n    }\n\n    return null\n  }\n\n  history(): string[]\n  history({ verbose }: { verbose: true }): Move[]\n  history({ verbose }: { verbose: false }): string[]\n  history({ verbose }: { verbose: boolean }): string[] | Move[]\n  history({ verbose = false }: { verbose?: boolean } = {}) {\n    const reversedHistory = []\n    const moveHistory = []\n\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    while (true) {\n      const move = reversedHistory.pop()\n      if (!move) {\n        break\n      }\n\n      if (verbose) {\n        moveHistory.push(this._makePretty(move))\n      } else {\n        moveHistory.push(this._moveToSan(move, this._moves()))\n      }\n      this._makeMove(move)\n    }\n\n    return moveHistory\n  }\n\n  private _pruneComments() {\n    const reversedHistory = []\n    const currentComments: Record<string, string> = {}\n\n    const copyComment = (fen: string) => {\n      if (fen in this._comments) {\n        currentComments[fen] = this._comments[fen]\n      }\n    }\n\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    copyComment(this.fen())\n\n    while (true) {\n      const move = reversedHistory.pop()\n      if (!move) {\n        break\n      }\n      this._makeMove(move)\n      copyComment(this.fen())\n    }\n    this._comments = currentComments\n  }\n\n  getComment() {\n    return this._comments[this.fen()]\n  }\n\n  setComment(comment: string) {\n    this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']')\n  }\n\n  deleteComment() {\n    const comment = this._comments[this.fen()]\n    delete this._comments[this.fen()]\n    return comment\n  }\n\n  getComments() {\n    this._pruneComments()\n    return Object.keys(this._comments).map((fen: string) => {\n      return { fen: fen, comment: this._comments[fen] }\n    })\n  }\n\n  deleteComments() {\n    this._pruneComments()\n    return Object.keys(this._comments).map((fen) => {\n      const comment = this._comments[fen]\n      delete this._comments[fen]\n      return { fen: fen, comment: comment }\n    })\n  }\n\n  setCastlingRights(\n    color: Color,\n    rights: Partial<Record<typeof KING | typeof QUEEN, boolean>>,\n  ) {\n    for (const side of [KING, QUEEN] as const) {\n      if (rights[side] !== undefined) {\n        if (rights[side]) {\n          this._castling[color] |= SIDES[side]\n        } else {\n          this._castling[color] &= ~SIDES[side]\n        }\n      }\n    }\n\n    this._updateCastlingRights()\n    const result = this.getCastlingRights(color)\n\n    return (\n      (rights[KING] === undefined || rights[KING] === result[KING]) &&\n      (rights[QUEEN] === undefined || rights[QUEEN] === result[QUEEN])\n    )\n  }\n\n  getCastlingRights(color: Color) {\n    return {\n      [KING]: (this._castling[color] & SIDES[KING]) !== 0,\n      [QUEEN]: (this._castling[color] & SIDES[QUEEN]) !== 0,\n    }\n  }\n\n  moveNumber() {\n    return this._moveNumber\n  }\n}\n","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import _typeof from \"./typeof.js\";\nexport default function toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : String(i);\n}","export default function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}"],"names":["WHITE","BLACK","PAWN","BISHOP","ROOK","QUEEN","KING","DEFAULT_POSITION","EMPTY","FLAGS","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","BITS","Ox88","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","PAWN_OFFSETS","b","w","PIECE_OFFSETS","n","r","q","k","ATTACKS","RAYS","PIECE_MASKS","p","PROMOTIONS","SIDES","ROOKS","square","flag","SECOND_RANK","TERMINATION_MARKERS","rank","file","isDigit","c","indexOf","algebraic","f","substring","swapColor","color","addMove","moves","from","to","piece","captured","arguments","length","undefined","flags","push","i","promotion","inferPieceType","san","pieceType","charAt","match","toLowerCase","strippedSan","move","replace","trimFen","fen","split","slice","join","Chess","constructor","_defineProperty","Array","this","load","clear","preserveHeaders","_board","_kings","_turn","_castling","_epSquare","_halfMoves","_moveNumber","_history","_comments","_header","_positionCounts","Proxy","get","target","position","Object","keys","set","count","trimmedFen","removeHeader","key","skipValidation","tokens","adjustments","concat","ok","error","moveNumber","parseInt","isNaN","halfMoves","test","rows","sumFields","previousWasNumber","kings","regex","some","char","toUpperCase","validateFen","Error","_put","type","_updateSetup","empty","castling","epSquare","bigPawnSquare","squares","_this$_board$square","_this$_board$square2","_makeMove","isLegal","_isKingAttacked","_undoMove","reset","put","_ref","_updateCastlingRights","_updateEnPassantSquare","_ref2","sq","currentPieceOnSquare","remove","_this$_board$Ox88$e","_this$_board$Ox88$e2","_this$_board$Ox88$e3","_this$_board$Ox88$e4","_this$_board$Ox88$a","_this$_board$Ox88$a2","_this$_board$Ox88$h","_this$_board$Ox88$h2","_this$_board$Ox88$a3","_this$_board$Ox88$a4","_this$_board$Ox88$h3","_this$_board$Ox88$h4","whiteKingInPlace","blackKingInPlace","_this$_board$currentS","_this$_board$currentS2","startSquare","currentSquare","attackers","_this$_board$square3","_this$_board$square4","_attacked","difference","index","offset","j","blocked","isAttacked","attackedBy","isCheck","inCheck","isCheckmate","_moves","isStalemate","isInsufficientMaterial","pieces","bishops","numPieces","squareColor","sum","len","_getRepetitionCount","isThreefoldRepetition","isDraw","isGameOver","verbose","map","_makePretty","_moveToSan","legal","forSquare","forPiece","us","them","firstSquare","lastSquare","singleSquare","_this$_board$to","castlingFrom","castlingTo","legalMoves","strict","moveObj","_moveFromSan","JSON","stringify","prettyMove","after","_push","turn","undo","old","pop","pgn","newline","maxWidth","result","headerExists","appendComment","moveString","comment","delimiter","reversedHistory","prefix","Result","strip","wrapComment","width","token","currentWidth","includes","header","_len","args","_key","loadPgn","newlineChar","mask","str","trim","headerRegexResults","RegExp","exec","headerString","headers","headerObj","value","parsePgnHeader","encodeComment","s","charCodeAt","toString","encodeURIComponent","toHex","decodeComment","startsWith","endsWith","decodeURIComponent","fromHex","ms","_match","bracket","semicolon","ravRegex","filter","halfMove","output","disambiguator","ambiguities","sameRank","sameFile","ambigFrom","ambigTo","getDisambiguator","cleanMove","matches","overlyDisambiguated","ascii","perft","depth","nodes","uglyMove","prettyFlags","fromAlgebraic","toAlgebraic","lan","before","board","row","history","moveHistory","_pruneComments","currentComments","copyComment","getComment","setComment","deleteComment","getComments","deleteComments","setCastlingRights","rights","side","getCastlingRights","obj","defineProperty","enumerable","configurable","writable","toPrimitive","t","e","Symbol","call","TypeError","String","Number","toPropertyKey","_typeof","o","iterator","prototype"],"sourceRoot":""}